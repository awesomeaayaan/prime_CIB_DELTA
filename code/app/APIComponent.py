import requests
from qrlib.QREnv import QREnv
from qrlib.QRRunItem import QRRunItem
from qrlib.QRComponent import QRComponent
import Constants
from robot.libraries.BuiltIn import BuiltIn
from qrlib.QRUtils import display
from FileComponent import FileComponent
from bs4 import BeautifulSoup
from qrlib.QRDecorators import run_item
import pandas as pd
import hmac
import hashlib
import json 
import xmltodict
import os

class APIComponent(QRComponent):
    def __init__(self):
        super().__init__()
        self.file = FileComponent()

    def load_vault_api(self):
        self.logger.info("Accessing vault data for apis")
        self._merchant_id = QREnv.VAULTS['cibapi']['merchant_id']
        self._cib_secret_key = QREnv.VAULTS['cibapi']['secret_key']
        self._cib_bulk_url = QREnv.VAULTS['cibapi']['cib_bulk_url']
        self._cib_hash_generating_url = QREnv.VAULTS['cibapi']['cib_hash_generating_url']
        self._xml_message = QREnv.VAULTS['cibapi']['xml_message']
        self.logger.info("Vault data for APIs accessed successfully")

    def generate_local_hash_code(self):
        secret_key = self._cib_secret_key
        xml_data = self._xml_message
        key_bytes = secret_key.encode('utf-8')
        data_bytes = xml_data.encode('utf-8')

        sha256_hmac = hmac.new(key_bytes, data_bytes,hashlib.sha256)
        hashed_data = sha256_hmac.hexdigest()
        display(f"SHA_256-hmac local value = {hashed_data}")
        
        return hashed_data

    def get_hash_code(self):
        """Hash code is generated by calling cibnepal api hash generation url"""
        headers = {
            "SECRETKEY": f"{self._cib_secret_key}"
            # 'MERCHANTID':'CIBirkzbvwb',
            # 'HASH':'e0c9aa7abbb690ef60e21f0b05c020ddcf7d75cf27c16e734e5e6155d0cfce10',
            # 'content-Type':'application/xml'
        }
        response = requests.post(self._cib_hash_generating_url, data=self._xml_message.strip(), headers=headers)
        data = response.content
        soup = BeautifulSoup(data, features='xml')
        hash_value = soup.find('Value')
        if hash_value:
            value = hash_value.text
            # if not os.path.exists(Constants.hash_code_file_path):
            #     os.makedirs(Constants.hash_code_file_path)
            with open(Constants.hash_code_file_path,'w') as file:
                file.write(value)
            # display(f"final hash value is: {value}")
        if response.status_code == 200:
            print(response.text)
        else:
            print(f"request failed with status code {response.status_code}")
        return value
            

    def get_data(self):
        self.logger.info("Calling API")
        if not os.path.exists(Constants.hash_code_file_path):
                os.makedirs(Constants.hash_code_file_path)
        with open(Constants.hash_code_file_path,'r') as file:
            api_hashed_data = file.read()

        headers = {
            'MERCHANTID':f'{self._merchant_id}',
            'HASH':f'{api_hashed_data}',
            # 'content-Type':'applicaition/xml'
        }
        response =  requests.post(self._cib_bulk_url, data=self._xml_message, headers=headers,timeout=60*10)
        xml_data = response.content

        data_dict = xmltodict.parse(xml_data)
        #convert to the json data format
        json_data  = json.dumps(data_dict,indent=4)
        datas = json.loads(json_data)
        # display(data)

        df = pd.DataFrame(columns=[
        'Name',
        'DOB', 
        'Gender', 
        'FatherName', 
        'CitizenshipDetails', 
        'PassportDetails', 
        'DrivingLicenseDetails',
        'VoterIDDetails',
        'PANDetails', 
        'CompanyDetails',
        'IndianEmbassyDetails',
        'BlackLists',
        'Account_Nature',
        'Status'
        ])

        num = 0
        for data in datas["BulkOffLoading"]["Individuals"]["Item"]:
            dicts = {}
            data_keys = list(data.keys())
            # print(data_keys)
            for data_key in data_keys[:4]:
                dicts[data_key] = data[data_key]
            for data_key in sorted(data_keys[4:]):
                keys = list(data[data_key].keys())
                data_count = int(data[data_key][keys[0]])
                if data_count > 1:
                    details = data[data_key][keys[1]]
                    if "BlackList" in data_key:
                        dicts[data_key] = ['|'.join(detail.values()) for detail in details]
                        continue
                    else:  
                        for detail in details:
                            dicts[data_key] = '|'.join(detail.values())
                            dicts['Account_Nature'] = 'Individual'
                            dicts['Status'] = 'new'
                            df.loc[len(df)] = dicts
                elif data_count == 0:
                    continue
                else:
                    details = data[data_key][keys[1]]
                    dicts[data_key] = '|'.join(details.values())

                if "BlackList" not in data_key:
                    dicts['Account_Nature'] = 'Individual'
                    dicts['Status'] = 'new'
                    df.loc[len(df)] = dicts
                    del dicts[data_key]
            # dicts['Account_Nature'] = 'Individual'
            # dicts['Status'] = 'new'
            num += 1
            # if num == 10:
            #     break
            
            display(f"--------------- Processed Data number Individual {num} -----------------------" )
            # display(dicts)
            # num += 1
    
            # df.loc[len(df)] = dicts
      
        for data in datas["BulkOffLoading"]["Institutions"]["Item"]:
            # for key_value in data:
            display("--------------------------- REal Data --------------------- \n")
            # display(data)
            dicts = {}
            data_keys = list(data.keys())
            for data_key in data_keys:
                if isinstance(data[data_key], str):
                    dicts[data_key] = data[data_key]
                else:
                    # maintain Citizenship details
                    keys = list(data[data_key].keys())
                    data_count = int(data[data_key][keys[0]])
                    if data_count > 1:
                        details = data[data_key][keys[1]]
                        dicts[data_key] = ['|'.join(entry.values()) for entry in details]
                    elif data_count == 0:
                        dicts[data_key] = ""
                    else:
                        details = data[data_key][keys[1]]
                        dicts[data_key] = '|'.join(details.values())

            dicts['Account_Nature'] = 'Institutions'
            dicts['Status'] = 'new'
            display(f"--------------- Processed Data Institution number {num} -----------------------" )
            # display(dicts)
            num += 1
            # if num == 20:
            #     break

            # appending to df
            df.loc[len(df)] = dicts
            # df.to_excel('institutetoday.xlsx')

            # df = self.file.convert_list_into_multiple_row(df)
        # df.to_excel('test2023.xlsx')
        df = self.file.convert_list_into_multiple_row(df)
        df = df.applymap(str)
        df.fillna('NA',inplace=True)
        # df.to_excel('test2023.xlsx')
        # df.to_excel("black_listed_data.xlsx", index=False)
        return df








        

